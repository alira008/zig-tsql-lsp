const std = @import("std");
const Span = @import("ast").Span;

token: TokenType,
start_pos: Span,
end_pos: Span,

pub const TokenKind = enum {
    identifier,
    quoted_identifier,
    local_variable,
    string_literal,
    comment,
    number,

    illegal,
    eof,

    sharp,
    mod,
    period,
    semicolon,
    left_bracket,
    right_bracket,
    left_paren,
    right_paren,
    plus,
    minus,
    comma,
    less_than,
    greater_than,
    less_than_equal,
    greater_than_equal,
    equal,
    not_equal_bang,
    not_equal_arrow,
    asterisk,
    forward_slash,

    // Keywords
    with,
    exec,
    select,
    distinct,
    top,
    from,
    where,
    insert,
    update,
    delete,
    create,
    alter,
    drop,
    declare,
    set,
    cast,
    as,
    asc,
    desc,
    and_,
    or_,
    order,
    by,
    over,
    partition,
    range,
    offset,
    fetch,
    row,
    rows,
    first,
    next,
    only,
    percent,
    ties,
    full,
    left,
    right,
    inner,
    outer,
    join,
    on,
    having,
    between,
    following,
    preceding,
    unbounded,
    current,
    not,
    like,
    all,
    exists,
    any,
    in,
    some,
    int,
    bigint,
    tinyint,
    smallint,
    bit,
    float,
    real,
    date,
    datetime,
    time,
    decimal,
    numeric,
    varchar,

    const Self = @This();

    pub fn toString(self: Self) []const u8 {
        return switch (self) {
            .identifier => "identifier",
            .quoted_identifier => "quoted_identifier",
            .local_variable => "local_variable",
            .string_literal => "string_literal",
            .comment => "comment",
            .number => "number",
            .illegal => "illegal",
            .eof => "eof",
            .sharp => "sharp",
            .mod => "mod",
            .period => "period",
            .semicolon => "semicolon",
            .left_bracket => "left_bracket",
            .right_bracket => "right_bracket",
            .left_paren => "left_paren",
            .right_paren => "right_paren",
            .plus => "plus",
            .minus => "minus",
            .comma => "comma",
            .less_than => "less_than",
            .greater_than => "greater_than",
            .less_than_equal => "less_than_equal",
            .greater_than_equal => "greater_than_equal",
            .equal => "equal",
            .not_equal_bang => "not_equal_bang",
            .not_equal_arrow => "not_equal_arrow",
            .asterisk => "asterisk",
            .forward_slash => "forward_slash",
            .with => "with",
            .exec => "exec",
            .select => "select",
            .distinct => "distinct",
            .top => "top",
            .from => "from",
            .where => "where",
            .insert => "insert",
            .update => "update",
            .delete => "delete",
            .create => "create",
            .alter => "alter",
            .drop => "drop",
            .declare => "declare",
            .set => "set",
            .cast => "cast",
            .as => "as",
            .asc => "asc",
            .desc => "desc",
            .and_ => "and",
            .or_ => "or",
            .order => "order",
            .by => "by",
            .over => "over",
            .partition => "partition",
            .range => "range",
            .offset => "offset",
            .fetch => "fetch",
            .row => "row",
            .rows => "rows",
            .first => "first",
            .next => "next",
            .only => "only",
            .percent => "percent",
            .ties => "ties",
            .full => "full",
            .left => "left",
            .right => "right",
            .inner => "inner",
            .outer => "outer",
            .join => "join",
            .on => "on",
            .having => "having",
            .between => "between",
            .following => "following",
            .preceding => "preceding",
            .unbounded => "unbounded",
            .current => "current",
            .not => "not",
            .like => "like",
            .all => "all",
            .exists => "exists",
            .any => "any",
            .in => "in",
            .some => "some",
            .int => "int",
            .bigint => "bigint",
            .tinyint => "tinyint",
            .smallint => "smallint",
            .bit => "bit",
            .float => "float",
            .real => "real",
            .date => "date",
            .datetime => "datetime",
            .time => "time",
            .decimal => "decimal",
            .numeric => "numeric",
            .varchar => "varchar",
        };
    }
};

pub const TokenType = union(TokenKind) {
    identifier: []const u8,
    quoted_identifier: []const u8,
    local_variable: []const u8,
    string_literal: []const u8,
    comment: []const u8,
    number: f64,

    illegal,
    eof,

    sharp,
    mod,
    period,
    semicolon,
    left_bracket,
    right_bracket,
    left_paren,
    right_paren,
    plus,
    minus,
    comma,
    less_than,
    greater_than,
    less_than_equal,
    greater_than_equal,
    equal,
    not_equal_bang,
    not_equal_arrow,
    asterisk,
    forward_slash,

    // Keywords
    with,
    exec,
    select,
    distinct,
    top,
    from,
    where,
    insert,
    update,
    delete,
    create,
    alter,
    drop,
    declare,
    set,
    cast,
    as,
    asc,
    desc,
    and_,
    or_,
    order,
    by,
    over,
    partition,
    range,
    offset,
    fetch,
    row,
    rows,
    first,
    next,
    only,
    percent,
    ties,
    full,
    left,
    right,
    inner,
    outer,
    join,
    on,
    having,
    between,
    following,
    preceding,
    unbounded,
    current,
    not,
    like,
    all,
    exists,
    any,
    in,
    some,
    int,
    bigint,
    tinyint,
    smallint,
    bit,
    float,
    real,
    date,
    datetime,
    time,
    decimal,
    numeric,
    varchar,

    pub fn toString(self: TokenType) []const u8 {
        return switch (self) {
            .identifier => self.identifier,
            .quoted_identifier => self.quoted_identifier,
            .local_variable => self.local_variable,
            .string_literal => self.string_literal,
            .comment => self.comment,
            .number => "number",
            .illegal => "illegal",
            .eof => "eof",
            .sharp => "sharp",
            .mod => "mod",
            .period => "period",
            .semicolon => "semicolon",
            .left_bracket => "left_bracket",
            .right_bracket => "right_bracket",
            .left_paren => "left_paren",
            .right_paren => "right_paren",
            .plus => "plus",
            .minus => "minus",
            .comma => "comma",
            .less_than => "less_than",
            .greater_than => "greater_than",
            .less_than_equal => "less_than_equal",
            .greater_than_equal => "greater_than_equal",
            .equal => "equal",
            .not_equal_bang => "not_equal_bang",
            .not_equal_arrow => "not_equal_arrow",
            .asterisk => "asterisk",
            .forward_slash => "forward_slash",
            .with => "with",
            .exec => "exec",
            .select => "select",
            .distinct => "distinct",
            .top => "top",
            .from => "from",
            .where => "where",
            .insert => "insert",
            .update => "update",
            .delete => "delete",
            .create => "create",
            .alter => "alter",
            .drop => "drop",
            .declare => "declare",
            .set => "set",
            .cast => "cast",
            .as => "as",
            .asc => "asc",
            .desc => "desc",
            .and_ => "and",
            .or_ => "or",
            .order => "order",
            .by => "by",
            .over => "over",
            .partition => "partition",
            .range => "range",
            .offset => "offset",
            .fetch => "fetch",
            .row => "row",
            .rows => "rows",
            .first => "first",
            .next => "next",
            .only => "only",
            .percent => "percent",
            .ties => "ties",
            .full => "full",
            .left => "left",
            .right => "right",
            .inner => "inner",
            .outer => "outer",
            .join => "join",
            .on => "on",
            .having => "having",
            .between => "between",
            .following => "following",
            .preceding => "preceding",
            .unbounded => "unbounded",
            .current => "current",
            .not => "not",
            .like => "like",
            .all => "all",
            .exists => "exists",
            .any => "any",
            .in => "in",
            .some => "some",
            .int => "int",
            .bigint => "bigint",
            .tinyint => "tinyint",
            .smallint => "smallint",
            .bit => "bit",
            .float => "float",
            .real => "real",
            .date => "date",
            .datetime => "datetime",
            .time => "time",
            .decimal => "decimal",
            .numeric => "numeric",
            .varchar => "varchar",
        };
    }
};
// keyword types
const map = std.StaticStringMap(TokenType).initComptime(.{
    .{ "with", .with },
    .{ "exec", .exec },
    .{ "select", .select },
    .{ "distinct", .distinct },
    .{ "top", .top },
    .{ "from", .from },
    .{ "where", .where },
    .{ "insert", .insert },
    .{ "update", .update },
    .{ "delete", .delete },
    .{ "create", .create },
    .{ "alter", .alter },
    .{ "drop", .drop },
    .{ "declare", .declare },
    .{ "set", .set },
    .{ "cast", .cast },
    .{ "as", .as },
    .{ "asc", .asc },
    .{ "desc", .desc },
    .{ "and", .and_ },
    .{ "or", .or_ },
    .{ "order", .order },
    .{ "by", .by },
    .{ "over", .over },
    .{ "partition", .partition },
    .{ "range", .range },
    .{ "offset", .offset },
    .{ "fetch", .fetch },
    .{ "row", .row },
    .{ "rows", .rows },
    .{ "first", .first },
    .{ "next", .next },
    .{ "only", .only },
    .{ "percent", .percent },
    .{ "ties", .ties },
    .{ "full", .full },
    .{ "left", .left },
    .{ "right", .right },
    .{ "inner", .inner },
    .{ "outer", .outer },
    .{ "join", .join },
    .{ "on", .on },
    .{ "having", .having },
    .{ "between", .between },
    .{ "following", .following },
    .{ "preceding", .preceding },
    .{ "unbounded", .unbounded },
    .{ "current", .current },
    .{ "not", .not },
    .{ "like", .like },
    .{ "all", .all },
    .{ "exists", .exists },
    .{ "any", .any },
    .{ "in", .in },
    .{ "some", .some },
    .{ "int", .int },
    .{ "bigint", .bigint },
    .{ "tinyint", .tinyint },
    .{ "smallint", .smallint },
    .{ "bit", .bit },
    .{ "float", .float },
    .{ "real", .real },
    .{ "date", .date },
    .{ "datetime", .datetime },
    .{ "time", .time },
    .{ "decimal", .decimal },
    .{ "numeric", .numeric },
    .{ "varchar", .varchar },
});

pub fn keyword(ident: []const u8) ?TokenType {
    var buf = [_]u8{0} ** 20;
    if (ident.len >= buf.len) {
        return null;
    }
    const lower_ident = std.ascii.lowerString(&buf, ident);

    return map.get(lower_ident);
}
